<chapter>
<title>The tbx event system</title>
<para>
The events in a tbx application can be categorised into three types:
<itemizedlist>
<listitem>Object/Gadget default events</listitem>
<listitem>User events</listitem>
<listitem>Commands</listitem>
</itemizedlist>
</para>
<para>
 The information for the event listeners is help separately
 from any C++ object/gadget/menu item class instance that
 has been created and is not affected by these being deleted
 or going out of scope. All event listeners are automatically
 removed when the underlying toolbox object that the events
 are on is destroyed.
</para>
<para>
 All event listening routines are given a pointer to the C++
 class instance that handles the event, so it is important
 that the handler class is not deleted before the event has
 been removed.
</para>

  <section>
    <title>Object/Gadget default events</title>
    <para>
      These are the default events generated by the underlying toolbox
      object/gadget.
    </para>
    <para>
      They are caught in a tbx application by adding a listener for the
      specific event to the object/gadget they apply to.
      <example>
        <title>To add a changed listener to a writeable field w</title>
        <programlisting>
          w.add_text_changed_listener(&amp;my_listener);
        </programlisting>
      The my_listener object is derived from a TextChangedListener and
      has its text_changed member called when the writeable field text
      changes.
      </example>
    </para>
    <para>
      You can add multiple listeners to the same event.
    </para>
    <note>
      <para>
        Note: The object/gadget must be set to deliver the event in
        the toolbox resource file for the listener to be called.
      </para>
    </note>
  </section>

 <section><title>User Events</title>
 <para>
These are events with number you have specified. They should be
 in the range 1 to 0x4FFF.
</para>
<para>
 These events are routed, that the item that is run is first
  tried on the object where the event originated.
  Then on the parent object. Next on the ancestor
  object and finally on the application.
</para>
<para>
 The first object/gadget that handles the event stops it
 from being bubbled up to the next higher level.
</para>
<para>
User events are caught in tbx by using the <function>add_command</function> method
on an object or the application.
</para>
</section>
<section><title>Commands</title>
<para>
 The Command class is used as a base for commands that can
 be executed from an event. It includes a virtual execute
 method that needs to be overridden to provide the command
 functionality.
</para>
<para>
 Commands can be added to user events (see above) or to
 specific functionality of a gadget or object.

</para>
</section>
</chapter>
