/*
 * tbx RISC OS toolbox library
 *
 * Copyright (C) 2010 Alan Buckley   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifndef TBX_OSERROR_H_
#define TBX_OSERROR_H_

#include <stdexcept>
#include <kernel.h>

namespace tbx
{

/**
 * Class representing an error generated by a call
 * to a RISC OS routine (SWI).
 */
class OsError : public std::runtime_error
{
public:
	/**
	 * Construct from an OS error.
	 *
	 * @param err OS error.
	 */
	OsError(_kernel_oserror *err) :
		std::runtime_error(err->errmess),
		_error(err->errnum)
	{
	};

	/**
	 * Return the OS error number
	 */
	int number() const {return _error;}

private:
	int _error;
};

/**
 * Function to throw a OS error as the OSError class.
 *
 * @param err the OS error to throw
 */
inline void raise_os_error(_kernel_oserror *err)
{
	throw OsError(err);
}

}

#endif /* TBX_OSERROR_H_ */
